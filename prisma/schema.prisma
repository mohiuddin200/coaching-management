generator client {
  provider   = "prisma-client-js"
  output     = "../src/generated/prisma"
  engineType = "binary"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String       @id @default(uuid())
  email           String       @unique
  role            Role         @default(Student)
  firstName       String?
  lastName        String?
  phoneNumber     String?
  parentPhone     String?
  smsEnabled      Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  attendances     Attendance[]
  assignedClasses Class[]      @relation("TeacherToClass")
  enrollments     Enrollment[]

  @@map("users")
}

model Class {
  id           String       @id @default(cuid())
  name         String
  scheduleTime DateTime
  capacity     Int
  status       ClassStatus  @default(Scheduled)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  teacherId    String
  attendances  Attendance[]
  teacher      User         @relation("TeacherToClass", fields: [teacherId], references: [id])
  enrollments  Enrollment[]
}

model Enrollment {
  id             String           @id @default(cuid())
  enrollmentDate DateTime         @default(now())
  status         EnrollmentStatus @default(Active)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  studentId      String
  classId        String
  class          Class            @relation(fields: [classId], references: [id])
  student        User             @relation(fields: [studentId], references: [id])
}

model Attendance {
  id        String           @id @default(cuid())
  timestamp DateTime         @default(now())
  entryType AttendanceType
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  studentId String
  classId   String
  deviceId  String?
  class     Class            @relation(fields: [classId], references: [id])
  device    BiometricDevice? @relation(fields: [deviceId], references: [id])
  student   User             @relation(fields: [studentId], references: [id])
}

model BiometricDevice {
  id          String       @id @default(cuid())
  name        String
  apiEndpoint String
  apiKey      String?
  status      String       @default("active")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attendances Attendance[]
}

model SmsLog {
  id             String    @id @default(cuid())
  recipientPhone String
  messageContent String
  status         SmsStatus @default(Pending)
  cost           Float?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model MarketingContact {
  id            String    @id @default(cuid())
  parentName    String
  phoneNumber   String    @unique
  queryDetails  String?
  lastContacted DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Role {
  Admin
  Teacher
  Student
  Staff
}

enum ClassStatus {
  Scheduled
  InProgress
  Completed
  Cancelled
}

enum EnrollmentStatus {
  Active
  Withdrawn
  Completed
}

enum AttendanceType {
  Entry
  Exit
}

enum SmsStatus {
  Sent
  Failed
  Pending
}
