generator client {
  provider   = "prisma-client-js"
  output     = "../src/generated/prisma"
  engineType = "binary"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// System users who can log in to the portal
model User {
  id              String    @id @default(uuid())
  email           String    @unique
  role            UserRole  @default(Teacher)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  teacherProfile  Teacher?  @relation("UserToTeacher")

  @@map("users")
}

// Teacher profiles (may or may not have portal access)
model Teacher {
  id             String         @id @default(uuid())
  firstName      String
  lastName       String
  email          String?
  phoneNumber    String
  subject        String?
  qualifications String?
  joinDate       DateTime       @default(now())
  status         Status         @default(Active)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userId         String?        @unique
  user           User?          @relation("UserToTeacher", fields: [userId], references: [id], onDelete: SetNull)
  classes        Class[]        @relation("TeacherToClass")
  classSections  ClassSection[] @relation("TeacherToClassSection")

  @@map("teachers")
}

// Student profiles (no portal access)
model Student {
  id             String       @id @default(uuid())
  firstName      String
  lastName       String
  email          String?
  phoneNumber    String?
  parentName     String
  parentPhone    String
  dateOfBirth    DateTime?
  address        String?
  enrollmentDate DateTime     @default(now())
  status         Status       @default(Active)
  smsEnabled     Boolean      @default(false)
  levelId        String?      // Added: Student's class level
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  level          Level?       @relation(fields: [levelId], references: [id])
  attendances    Attendance[]
  enrollments    Enrollment[]

  @@map("students")
}

// Academic levels (Class 1-10)
model Level {
  id          String    @id @default(cuid())
  name        String    @unique // "Class 1", "Class 2", etc.
  levelNumber Int       @unique // 1-10
  description String?
  status      Status    @default(Active)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  subjects    Subject[]
  students    Student[]

  @@map("levels")
}

// Subjects for each level
model Subject {
  id            String         @id @default(cuid())
  name          String         // "Mathematics", "English", etc.
  code          String?        // "MATH", "ENG"
  description   String?
  levelId       String
  level         Level          @relation(fields: [levelId], references: [id], onDelete: Cascade)
  status        Status         @default(Active)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  classSections ClassSection[]

  @@unique([levelId, name])
  @@map("subjects")
}

// Class sections (actual teaching groups)
model ClassSection {
  id           String       @id @default(cuid())
  name         String       // "Section A", "Morning Batch"
  subjectId    String
  teacherId    String
  capacity     Int          @default(30)
  roomNumber   String?
  academicYear String       // "2024-2025"
  status       ClassStatus  @default(Scheduled)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  subject      Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher      Teacher      @relation("TeacherToClassSection", fields: [teacherId], references: [id])
  schedules    Schedule[]
  enrollments  Enrollment[]
  attendances  Attendance[]

  @@map("class_sections")
}

// Schedule for class sections
model Schedule {
  id             String       @id @default(cuid())
  classSectionId String
  dayOfWeek      DayOfWeek
  startTime      String       // "09:00"
  endTime        String       // "10:30"
  status         Status       @default(Active)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  classSection   ClassSection @relation(fields: [classSectionId], references: [id], onDelete: Cascade)

  @@map("schedules")
}

// Legacy - kept for backward compatibility, will be migrated to ClassSection
model Class {
  id           String       @id @default(cuid())
  name         String
  scheduleTime DateTime
  capacity     Int
  status       ClassStatus  @default(Scheduled)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  teacherId    String
  attendances  Attendance[]
  teacher      Teacher      @relation("TeacherToClass", fields: [teacherId], references: [id])
  enrollments  Enrollment[]

  @@map("classes")
}

model Enrollment {
  id             String           @id @default(cuid())
  enrollmentDate DateTime         @default(now())
  status         EnrollmentStatus @default(Active)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  studentId      String
  classId        String?          // Legacy field
  classSectionId String?          // New field
  class          Class?           @relation(fields: [classId], references: [id])
  classSection   ClassSection?    @relation(fields: [classSectionId], references: [id], onDelete: Cascade)
  student        Student          @relation(fields: [studentId], references: [id])

  @@map("enrollments")
}

model Attendance {
  id             String           @id @default(cuid())
  timestamp      DateTime         @default(now())
  entryType      AttendanceType
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  studentId      String
  classId        String?          // Legacy field
  classSectionId String?          // New field
  deviceId       String?
  class          Class?           @relation(fields: [classId], references: [id])
  classSection   ClassSection?    @relation(fields: [classSectionId], references: [id], onDelete: Cascade)
  device         BiometricDevice? @relation(fields: [deviceId], references: [id])
  student        Student          @relation(fields: [studentId], references: [id])

  @@map("attendances")
}

model BiometricDevice {
  id          String       @id @default(cuid())
  name        String
  apiEndpoint String
  apiKey      String?
  status      String       @default("active")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attendances Attendance[]

  @@map("biometric_devices")
}

model SmsLog {
  id             String    @id @default(cuid())
  recipientPhone String
  messageContent String
  status         SmsStatus @default(Pending)
  cost           Float?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("sms_logs")
}

model MarketingContact {
  id            String    @id @default(cuid())
  parentName    String
  phoneNumber   String    @unique
  queryDetails  String?
  lastContacted DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("marketing_contacts")
}

model Feedback {
  id          String       @id @default(cuid())
  userId      String?
  userName    String?
  email       String?
  type        FeedbackType @default(General)
  subject     String
  message     String
  status      FeedbackStatus @default(Open)
  priority    Priority     @default(Medium)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("feedbacks")
}

enum UserRole {
  Admin
  Teacher
  Staff
}

enum Status {
  Active
  Inactive
}

enum ClassStatus {
  Scheduled
  InProgress
  Completed
  Cancelled
}

enum EnrollmentStatus {
  Active
  Withdrawn
  Completed
}

enum AttendanceType {
  Entry
  Exit
}

enum SmsStatus {
  Sent
  Failed
  Pending
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum FeedbackType {
  General
  BugReport
  FeatureRequest
  Support
  Complaint
  Suggestion
}

enum FeedbackStatus {
  Open
  InProgress
  Resolved
  Closed
}

enum Priority {
  Low
  Medium
  High
  Urgent
}
