generator client {
  provider   = "prisma-client-js"
  output     = "../src/generated/prisma"
  engineType = "binary"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// System users who can log in to the portal
model User {
  id              String    @id @default(uuid())
  email           String    @unique
  role            UserRole  @default(Teacher)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  teacherProfile  Teacher?  @relation("UserToTeacher")

  @@map("users")
}

// Teacher profiles (may or may not have portal access)
model Teacher {
  id             String      @id @default(uuid())
  firstName      String
  lastName       String
  email          String?
  phoneNumber    String
  subject        String?
  qualifications String?
  joinDate       DateTime    @default(now())
  status         Status      @default(Active)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  userId         String?     @unique
  user           User?       @relation("UserToTeacher", fields: [userId], references: [id], onDelete: SetNull)
  classes        Class[]     @relation("TeacherToClass")

  @@map("teachers")
}

// Student profiles (no portal access)
model Student {
  id             String       @id @default(uuid())
  firstName      String
  lastName       String
  email          String?
  phoneNumber    String?
  parentName     String
  parentPhone    String
  dateOfBirth    DateTime?
  address        String?
  enrollmentDate DateTime     @default(now())
  status         Status       @default(Active)
  smsEnabled     Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  attendances    Attendance[]
  enrollments    Enrollment[]

  @@map("students")
}

model Class {
  id           String       @id @default(cuid())
  name         String
  scheduleTime DateTime
  capacity     Int
  status       ClassStatus  @default(Scheduled)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  teacherId    String
  attendances  Attendance[]
  teacher      Teacher      @relation("TeacherToClass", fields: [teacherId], references: [id])
  enrollments  Enrollment[]

  @@map("classes")
}

model Enrollment {
  id             String           @id @default(cuid())
  enrollmentDate DateTime         @default(now())
  status         EnrollmentStatus @default(Active)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  studentId      String
  classId        String
  class          Class            @relation(fields: [classId], references: [id])
  student        Student          @relation(fields: [studentId], references: [id])

  @@map("enrollments")
}

model Attendance {
  id        String           @id @default(cuid())
  timestamp DateTime         @default(now())
  entryType AttendanceType
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  studentId String
  classId   String
  deviceId  String?
  class     Class            @relation(fields: [classId], references: [id])
  device    BiometricDevice? @relation(fields: [deviceId], references: [id])
  student   Student          @relation(fields: [studentId], references: [id])

  @@map("attendances")
}

model BiometricDevice {
  id          String       @id @default(cuid())
  name        String
  apiEndpoint String
  apiKey      String?
  status      String       @default("active")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attendances Attendance[]

  @@map("biometric_devices")
}

model SmsLog {
  id             String    @id @default(cuid())
  recipientPhone String
  messageContent String
  status         SmsStatus @default(Pending)
  cost           Float?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("sms_logs")
}

model MarketingContact {
  id            String    @id @default(cuid())
  parentName    String
  phoneNumber   String    @unique
  queryDetails  String?
  lastContacted DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("marketing_contacts")
}

enum UserRole {
  Admin
  Teacher
  Staff
}

enum Status {
  Active
  Inactive
}

enum ClassStatus {
  Scheduled
  InProgress
  Completed
  Cancelled
}

enum EnrollmentStatus {
  Active
  Withdrawn
  Completed
}

enum AttendanceType {
  Entry
  Exit
}

enum SmsStatus {
  Sent
  Failed
  Pending
}
